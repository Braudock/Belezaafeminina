#!/usr/bin/env python3
"""
Script para auxiliar na recupera√ß√£o de celular hackeado/clonado
Automatiza verifica√ß√µes e organiza o processo de recupera√ß√£o
"""

import os
import json
import datetime
import time
import subprocess
import requests
from typing import Dict, List

class CelularRecovery:
    def __init__(self, numero_linha: str):
        self.numero = numero_linha
        self.log_file = f"recovery_log_{numero_linha}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        self.recovery_data = {
            "numero": numero_linha,
            "inicio_processo": datetime.datetime.now().isoformat(),
            "acoes_realizadas": [],
            "contatos_importantes": {},
            "status": "iniciado"
        }
    
    def log_acao(self, acao: str, detalhes: str = ""):
        """Registra a√ß√£o realizada no log"""
        timestamp = datetime.datetime.now().isoformat()
        self.recovery_data["acoes_realizadas"].append({
            "timestamp": timestamp,
            "acao": acao,
            "detalhes": detalhes
        })
        print(f"[{timestamp}] ‚úì {acao}")
        if detalhes:
            print(f"    ‚Üí {detalhes}")
    
    def verificar_status_linha(self):
        """Verifica se a linha ainda responde"""
        print("\nüîç VERIFICANDO STATUS DA LINHA")
        try:
            # Simula√ß√£o de ping para verificar conectividade
            response = subprocess.run(['ping', '-c', '1', '8.8.8.8'], 
                                    capture_output=True, text=True, timeout=5)
            if response.returncode == 0:
                self.log_acao("Internet funcionando", "Conex√£o OK para pr√≥ximos passos")
            else:
                self.log_acao("Sem internet", "Verificar conex√£o Wi-Fi")
        except Exception as e:
            self.log_acao("Erro verifica√ß√£o", f"Erro: {str(e)}")
    
    def gerar_checklist_emergencia(self):
        """Gera checklist de a√ß√µes imediatas"""
        print("\nüö® CHECKLIST DE EMERG√äNCIA")
        checklist = [
            "1. Ligar AGORA para 1056 (TIM) e reportar hack",
            "2. Solicitar bloqueio imediato da linha",
            "3. Ir pessoalmente a loja TIM com RG e CPF",
            "4. Solicitar novo chip com mesmo n√∫mero",
            "5. Alterar senhas de apps (WhatsApp, bancos)",
            "6. Ativar 2FA onde poss√≠vel",
            "7. Verificar movimenta√ß√µes banc√°rias",
            "8. Registrar B.O. online se necess√°rio",
            "9. Notificar contatos importantes sobre hack",
            "10. Monitorar contas por 48h"
        ]
        
        for item in checklist:
            print(f"  {item}")
        
        self.log_acao("Checklist gerado", "10 a√ß√µes priorit√°rias listadas")
        return checklist
    
    def gerar_template_contatos(self):
        """Gera template de mensagem para avisar contatos"""
        template = f"""
üö® AVISO DE SEGURAN√áA üö®

Meu n√∫mero {self.numero} foi hackeado/clonado.

‚ùå N√ÉO aceitem pedidos de dinheiro
‚ùå N√ÉO enviem c√≥digos ou senhas
‚ùå N√ÉO fa√ßam transfer√™ncias

‚úÖ Para falar comigo, me liguem ou mandem WhatsApp
‚úÖ Confirmen pedidos pessoalmente

Estou resolvendo com a operadora.
Obrigado!
"""
        print("\nüì± TEMPLATE PARA AVISAR CONTATOS:")
        print(template)
        self.log_acao("Template criado", "Mensagem para avisar contatos")
        return template
    
    def verificar_apps_vulneraveis(self):
        """Lista apps que usam n√∫mero para autentica√ß√£o"""
        print("\nüîê APPS QUE PRECISAM ATEN√á√ÉO:")
        apps_criticos = [
            "WhatsApp - Alterar autentica√ß√£o em duas etapas",
            "Instagram - Verificar logins ativos",
            "Facebook - Revisar dispositivos conectados", 
            "Bancos (Ita√∫, Bradesco, etc) - Alterar senhas",
            "Uber/99 - Verificar viagens n√£o autorizadas",
            "iFood - Verificar pedidos suspeitos",
            "Email - Ativar 2FA",
            "Telegram - Verificar sess√µes ativas"
        ]
        
        for app in apps_criticos:
            print(f"  ‚ö†Ô∏è  {app}")
        
        self.log_acao("Apps vulner√°veis listados", f"{len(apps_criticos)} apps identificados")
        return apps_criticos
    
    def monitorar_recuperacao(self, intervalo_minutos: int = 30):
        """Monitora o processo de recupera√ß√£o"""
        print(f"\n‚è∞ INICIANDO MONITORAMENTO (verifica√ß√£o a cada {intervalo_minutos}min)")
        
        tentativas = 0
        max_tentativas = 48  # 24h se intervalo = 30min
        
        while tentativas < max_tentativas:
            try:
                # Simula verifica√ß√£o de status
                print(f"\nüîÑ Verifica√ß√£o #{tentativas + 1}")
                
                # Aqui voc√™ pode adicionar verifica√ß√µes reais:
                # - Ping para n√∫mero
                # - Verifica√ß√£o de apps
                # - Status de notifica√ß√µes
                
                resposta = input("Linha j√° foi recuperada? (s/n): ").lower()
                if resposta == 's':
                    self.log_acao("LINHA RECUPERADA", "Processo conclu√≠do com sucesso!")
                    self.recovery_data["status"] = "recuperado"
                    self.salvar_log()
                    return True
                
                tentativas += 1
                if tentativas < max_tentativas:
                    print(f"‚è≥ Aguardando {intervalo_minutos} minutos...")
                    time.sleep(intervalo_minutos * 60)
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  Monitoramento interrompido pelo usu√°rio")
                break
        
        print("‚ö†Ô∏è  Tempo limite de monitoramento atingido")
        return False
    
    def salvar_log(self):
        """Salva log completo do processo"""
        try:
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(self.recovery_data, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Log salvo em: {self.log_file}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar log: {e}")
    
    def executar_processo_completo(self):
        """Executa o processo completo de recupera√ß√£o"""
        print("="*60)
        print("üî• SCRIPT DE RECUPERA√á√ÉO DE CELULAR HACKEADO")
        print("="*60)
        print(f"üì± N√∫mero: {self.numero}")
        print(f"‚è∞ In√≠cio: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        
        # Executa todas as etapas
        self.verificar_status_linha()
        self.gerar_checklist_emergencia()
        self.gerar_template_contatos() 
        self.verificar_apps_vulneraveis()
        
        print("\n" + "="*60)
        print("üéØ PR√ìXIMOS PASSOS CR√çTICOS:")
        print("1. LIGUE AGORA: 1056 (TIM)")
        print("2. V√Å √Ä LOJA TIM com RG e CPF")
        print("3. TROQUE TODAS AS SENHAS")
        print("="*60)
        
        # Pergunta se quer monitorar
        monitor = input("\nIniciar monitoramento autom√°tico? (s/n): ").lower()
        if monitor == 's':
            while True:
                try:
                    intervalo_input = input("Intervalo em minutos (padr√£o 30): ").strip()
                    if not intervalo_input:
                        intervalo = 30
                        break
                    elif intervalo_input.isdigit() and int(intervalo_input) > 0:
                        intervalo = int(intervalo_input)
                        break
                    else:
                        print("‚ùå Digite apenas n√∫meros positivos ou ENTER para padr√£o")
                except ValueError:
                    print("‚ùå Entrada inv√°lida, tente novamente")
            
            print(f"‚úÖ Usando intervalo de {intervalo} minutos")
            self.monitorar_recuperacao(intervalo)
        
        self.recovery_data["fim_processo"] = datetime.datetime.now().isoformat()
        self.salvar_log()
        
        print("\n‚úÖ Processo conclu√≠do! Verifique o arquivo de log gerado.")

def main():
    """Fun√ß√£o principal"""
    print("üî• RECUPERA√á√ÉO DE CELULAR HACKEADO")
    print("Desenvolvido para casos de urg√™ncia\n")
    
    # Solicita n√∫mero
    numero = input("Digite seu n√∫mero (ex: 11983083306): ").strip()
    if not numero:
        print("‚ùå N√∫mero obrigat√≥rio!")
        return
    
    # Confirma antes de prosseguir
    print(f"\nüì± N√∫mero: {numero}")
    confirmacao = input("Confirmar e iniciar processo? (s/n): ").lower()
    
    if confirmacao != 's':
        print("‚ùå Processo cancelado pelo usu√°rio")
        return
    
    # Executa recupera√ß√£o
    recovery = CelularRecovery(numero)
    recovery.executar_processo_completo()

if __name__ == "__main__":
    main()